* Checklist [16/16]
# ASP
** DONE ASP needs you to describe the problem and the solution
   CLOSED: [2018-05-16 Wed 15:31]
For traditional problems, you need to specify how you can solve the problem
For your example, asp would require you do describe the success
criteria
** DONE Introduce Prolog
   CLOSED: [2018-05-16 Wed 15:31]
Prolog comes out of the blue
** DONE Description of what an ASP rule looks like
   CLOSED: [2018-05-16 Wed 15:31]
** DONE Description of what an ASP constraint looks like
   CLOSED: [2018-05-16 Wed 15:31]
** DONE Description of what an ASP solver is
   CLOSED: [2018-05-16 Wed 15:31]
** DONE What is an answer set?
   CLOSED: [2018-05-16 Wed 15:31]
** DONE Include the code of a Sudoku puzzle
   CLOSED: [2018-05-16 Wed 15:31]

# Rearrange sec. 5
** DONE Make 5.1.3 into chapter 4
   CLOSED: [2018-05-17 Thu 12:18]
Two subsections: one with context, one with StoryBuilder
** DONE Move 5.2
   CLOSED: [2018-05-16 Wed 15:33]
Current section 5.2 seems out of place and the first sentence should
say "we described". I would place current 5.2 in front of current 5.1.3
and make that the new 5.1.3

# Fix ch. 6 duplication
** DONE Copy traces from ch. 6 to ch. 4, but adapt to hero's journey
   CLOSED: [2018-05-30 Wed 11:12]
** DONE Use the asp/instal figs in ch. 6 in ch. 4 as well (for HJ)
   CLOSED: [2018-05-30 Wed 11:13]
** DONE Include JASON connection in ch.4 under new heading
   CLOSED: [2018-05-29 Tue 11:16]

# Ch. 7
** DONE page 151: In Section 6.3 on page 115, we describe one scene: should have been describeD
   CLOSED: [2018-05-16 Wed 15:35]
** DONE page 163:Here is an example: In this section we show? Here is an example does not read nicely
   CLOSED: [2018-05-16 Wed 15:36]
** DONE page 165:This evaluation of StoryBuilder: needs a section called Summary
   CLOSED: [2018-05-16 Wed 15:37]

# Ch. 8
** DONE 8.4.11: I would rename as Analysis and include a pararaph summarises all your findings from previous subsections.
   CLOSED: [2018-05-29 Tue 11:12]


* Email 1
[[mu4e:msgid:1524582444.2130.212.camel@bath.ac.uk][Corrections I]]

Hi Matt,

I finally managed to get some time to work on your corrections.
I will drop you an email if I find things that need addressing.

Chapters 1,2 and 3 are fine.

Chapter 4 p73: your description of ASP - procedural programs are not
completely correct.
ASP requires you to describe the problem and the solution. For
traditional programs you need to specify how you can solve to problem.
For your example, asp would require you do describe the success
criteria
Prolog comes out of the blue

I also think it needs description of what a rule looks likes, what a
constraint is and what a solver is. These are concepts you use later.
Also, what is an answer set?
Maybe include the code of a sudoku puzzle.

Apart from this chapter 4 is fine.

Once you updated the asp section, can you send it?

In the meantime I will get on with the remainder of the document.

Thanks,
Marina
* Email 2
[[mu4e:msgid:1524583152.2130.219.camel@bath.ac.uk][Corrections II]]

Hi Matt,

Looking at chapter 5.
This is just a stylistic comment.
I would make 5.1.3 into 5.2 with two subsections one with the context
and one with the storybuilder.

Current section 5.2 seems out of place and the first sentence should
say "we described". I would place current 5.2 in front of current 5.1.3
and make that the new 5.1.3

Except for these two things, chapter 5 is fine.

Ciao,
Marina

P.S. I will complete remaining chapters on Friday
* Email 3
[[mu4e:msgid:1524823394.3315.49.camel@bath.ac.uk][corrections]]


Hi Matt,

There seems to be a lot of duplication in chapter 6. You explain
institutions again and go in a lot of instal detail which I feels out
of place to me. The figures explaining the traces would do far better
in chapter 4.
This chapter reads as the paper it used to be, which does not feel
write.
It is better to integrate chapter 6 with chapter 4.
Take some of the asp/instal figures to better explain the concepts in
chapter 4. Include the connection to jason, connection in chapter 4
under a new heading.

I think (and hope) that integration should be relatively
straightforward.

5.1.3 needs to be moved to chapter 4 as well.


Regarding chapter 7:
page 151: In Section 6.3 on page 115, we describe one scene: should
have been describeD
page 163:Here is an example: In this section we show? Here is an
example does not read nicely
page 165:This evaluation of StoryBuilder: needs a section called
Summary

Regarding chapter 8:
8.4.11: I would rename as Analysis and include a pararaph summarises
all your findings from previous subsections.

For the final version, please switch off the colour boxes around links.

Happy to discuss in person or via hangouts.
Just to let you know, I am not available Thursday and Friday next week.

Ciao,
Marina

* Email 4 
Some comments:
The first paragraph of 4.4.1 is a bit messy:You mix traditional (I 
would say procedural) and declarative: 
"Traditional programming languages 
(such as Java or Python) require the user to describe how to solve the 
problem. For example, 
a Sudoku game would be created by logically describing the rules of the 
game, which are used 
to search for potential solutions when given number grids as input. 
Contrast this with the 
traditional programming approach, which would be to describe the steps 
that are taken when a Sudoku game is played" 

"An ASP program consists of three elements: a knowledge base of 
“facts”, rules for generating 
new facts, and constraints that limit the number of new facts that can 
be generated.": this is wrong 

Facts are not created. Constraints block sets to be answer sets but do 
not create anything.  

Please include a definition of what an answer set is and define what a 
fact and a rule is.  


"The benefit of using ASP over Prolog comes 
from its use of the stable model semantics, which allows for the use of 
negation as failure with- 
out the risk of an ASP program getting stuck in an infinite loop. As 
each free variable is 
grounded (the space of all possible values for a variable is 
generated), a search for solutions 
should terminate even when negation is used." 

Theoretically Prolog also uses the stable model semantics, The problem 
is that its implementation is not fully declarative, hence the order of 
rules being important and the lack of completeness. 
