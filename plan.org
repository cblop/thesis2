* DONE storybuilder: discussion
  CLOSED: [2017-08-26 Sat 10:32]
* DONE storybuilder: design justification
  CLOSED: [2017-08-26 Sat 11:18]
* DONE vis.js link
  CLOSED: [2017-08-26 Sat 17:47]
* DONE storybuilder: change bit about Punch and Judy subtrope
  CLOSED: [2017-08-26 Sat 11:02]
* DONE storybuilder: different colour background for task descriptions
  CLOSED: [2017-08-26 Sat 17:47]
* DONE redo subtrope3.dot graph visualisation (line 4329)
  CLOSED: [2017-09-20 Wed 15:41]
* DONE go through mnotes and delete old ones
  CLOSED: [2017-09-20 Wed 14:24]
* TODO consider adding detail to compilation strategy
* TODO check that no lstlistings are split across pages. Put inside float/minipage to fix
* DONE generate trace visualisations with Julian
  CLOSED: [2017-09-20 Wed 10:46]
* DONE move legal application to future work section
  CLOSED: [2017-09-20 Wed 10:46]
* TODO go through TropICAL figures and put compiled InstAL side by side with source
** Notes
*** Compilation Strategy

1. Parse entity definitions
2. Parse rest of trope, inserting entity defs
3. Transform parse tree into hash map (examples of both in appendix)
4. Generate code from hash map

So, I think for each thing that is compiled (inits, terms, gens, etc), best to list the steps the code goes through. The key process is to describe the extraction of parameters into letters.

**** Get-params
1. Find all the events that can happen in the trope (including branches, etc): {:event {:verb go :role hero :object home}}
2. Get all of the roles, objects and places from the trope (from the defs)
3. Assign unique alphabet letters to all roles, objects and places (in that order)
**** Fluent decs
**** Initiates
**** Terminates
**** Generates
1. Get mapping of alphabetical letters to entities (this must always be the same)
2. Get events (minus obligations) that occur in the trope
3. Get obligations that happen
4. 
**** Initially
* DONE check for citet and citep usage
  CLOSED: [2017-09-20 Wed 14:21]
* TODO fix broken refs
* TODO add visualisation of adding audience participation trope (near fig:audience-participation)
* TODO revise presentation of StoryBuilder chapter (messy with floats and listings)
* TODO fix all figures so that they float
* TODO add summary of eval to abstract
* DONE un-delete old version of Institutions chapter
  CLOSED: [2017-09-20 Wed 10:46]
* TODO ask Julian about section 7.3.3 (User Tasks). What's an example of what I want a task to demonstrate? Are the existing descriptions eliciting?
* TODO relate tasks to requirements at start of eval section
# * TODO try replacing compactenum and compactitem
* TODO tropes: set up "this is the problem / what are the options / choose this" argument (narrativise)
* TODO tropes: archetypical institutional model for a trope (is this the sausages scene in the appendix?)
* TODO tropes: crop periodic table as suggested
* TODO revise the explanation of converting tropes to institutions (section 1.3)
* TODO add bit on trope phases (in addition to what's there) earlier in the /tropes/ chapter
* DONE capitalise all figs, sections, chapters, listings, formulas, rules
  CLOSED: [2017-09-20 Wed 14:18]
* TODO finish full sausages institution in appendix
* TODO remove "The Owner has an Object" from example PJ trope
* TODO Line 1538 mentions constrasting temporal logic with insts, so put this in
* TODO standardise fonts in all institution listings
* TODO narrativise "institutions" chapter (beginning, glue, end)
* TODO revise the appendices
* TODO lit review: add background on institutions & norms (line 1239)
* TODO revise your emph policy: first use is probably best (rather than all)
* TODO look up Rumelhart's arrows (line 928) and explain
* TODO line 989: look up refs for examples of planner systems
* TODO write about using appraisal model in future work
* TODO add intro to Institutions chapter to describe motivations (with outline of content at end)
* TODO showstringspaces=false
* TODO check for compilation warnings / errors
* TODO fix section / line hyperlinks
